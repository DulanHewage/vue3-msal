{
  "version": 3,
  "sources": ["../src/index.ts", "../src/msal-config.ts", "../src/vue3-msal-plugin.ts", "../src/helpers.ts"],
  "sourcesContent": ["import { InteractionStatus, InteractionType } from '@azure/msal-browser';\nimport type {\n  AuthenticationResult,\n  AuthError,\n  PopupRequest,\n  RedirectRequest,\n  SilentRequest,\n} from '@azure/msal-browser';\nimport { getCurrentInstance, toRefs, watch, ref } from 'vue';\nimport type { Ref } from 'vue';\nimport type { MsalContext, MsalAuthenticationResult } from './types';\n\nimport { msalInstance } from './msal-config';\nimport { msalPlugin } from './vue3-msal-plugin';\n\n// Define default login request\nconst loginRequest = {\n  scopes: ['User.Read'],\n};\n\n/**\n * Provides access to the MSAL instance, user accounts, and interaction status.\n * @throws {string} If called outside the setup() function of a component or if the MSAL plugin is not installed.\n * @returns {MsalContext} The MSAL context.\n */\nexport function useMsal(): MsalContext {\n  const internalInstance = getCurrentInstance();\n  if (!internalInstance) {\n    throw 'useMsal() cannot be called outside the setup() function of a component';\n  }\n  const { instance, accounts, inProgress } = toRefs(internalInstance.appContext.config.globalProperties.$msal);\n\n  if (!instance.value || !accounts.value || !inProgress.value) {\n    throw 'Please install the msalPlugin';\n  }\n\n  if (inProgress.value === InteractionStatus.Startup) {\n    instance.value.initialize().then(() => {\n      instance.value.handleRedirectPromise().catch((error) => {\n        // Errors should be handled by listening to the LOGIN_FAILURE event\n        console.error(error);\n        return;\n      });\n    });\n  }\n\n  return {\n    instance: instance.value,\n    accounts,\n    inProgress,\n    loginRequest,\n    callMsGraph,\n  };\n}\n\n/**\n * Returns a reactive reference to a boolean indicating whether the user is authenticated.\n * @returns {Ref<boolean>} A reference to a boolean indicating whether the user is authenticated.\n */\nexport function useIsAuthenticated(): Ref<boolean> {\n  const { accounts } = useMsal();\n  const isAuthenticated = ref(accounts.value.length > 0);\n\n  watch(accounts, () => {\n    isAuthenticated.value = accounts.value.length > 0;\n  });\n\n  return isAuthenticated;\n}\n\n/**\n * Returns an object with methods for acquiring a token and reactive references to the authentication result, any error, and whether an authentication process is in progress.\n * @param {InteractionType} interactionType The type of interaction to use for authentication.\n * @param {PopupRequest | RedirectRequest | SilentRequest} request The request object for authentication.\n * @returns {MsalAuthenticationResult} The result of the authentication process.\n */\nexport function useMsalAuthentication(\n  interactionType: InteractionType,\n  request: PopupRequest | RedirectRequest | SilentRequest,\n): MsalAuthenticationResult {\n  const { instance, inProgress } = useMsal();\n\n  const localInProgress = ref<boolean>(false);\n  const result = ref<AuthenticationResult | null>(null);\n  const error = ref<AuthError | null>(null);\n\n  const acquireToken = async (requestOverride?: PopupRequest | RedirectRequest | SilentRequest) => {\n    if (!localInProgress.value) {\n      localInProgress.value = true;\n      const tokenRequest = requestOverride || request;\n\n      if (inProgress.value === InteractionStatus.Startup || inProgress.value === InteractionStatus.HandleRedirect) {\n        try {\n          const response = await instance.handleRedirectPromise();\n          if (response) {\n            result.value = response;\n            error.value = null;\n            return;\n          }\n        } catch (e) {\n          result.value = null;\n          error.value = e as AuthError;\n          return;\n        }\n      }\n\n      try {\n        const response = await instance.acquireTokenSilent(tokenRequest);\n        result.value = response;\n        error.value = null;\n      } catch (e) {\n        if (inProgress.value !== InteractionStatus.None) {\n          return;\n        }\n\n        if (interactionType === InteractionType.Popup) {\n          instance\n            .loginPopup(tokenRequest)\n            .then((response) => {\n              result.value = response;\n              error.value = null;\n            })\n            .catch((e) => {\n              error.value = e;\n              result.value = null;\n            });\n        } else if (interactionType === InteractionType.Redirect) {\n          await instance.loginRedirect(tokenRequest).catch((e) => {\n            error.value = e;\n            result.value = null;\n          });\n        }\n      }\n      localInProgress.value = false;\n    }\n  };\n\n  const stopWatcher = watch(inProgress, () => {\n    if (!result.value && !error.value) {\n      acquireToken();\n    } else {\n      stopWatcher();\n    }\n  });\n\n  acquireToken();\n\n  return {\n    acquireToken,\n    result,\n    error,\n    inProgress: localInProgress,\n  };\n}\n\n// Define the configuration for the Graph API\nconst graphConfig = {\n  graphMeEndpoint: 'https://graph.microsoft.com/v1.0/me',\n};\n\n/**\n * Makes a GET request to the Microsoft Graph API.\n * @param {string} accessToken The access token to use for the request.\n * @returns {Promise<any>} A promise that resolves with the response data or rejects with an error.\n */\nasync function callMsGraph(accessToken: string) {\n  const headers = new Headers();\n  const bearer = `Bearer ${accessToken}`;\n\n  headers.append('Authorization', bearer);\n\n  const options = {\n    method: 'GET',\n    headers: headers,\n  };\n\n  return fetch(graphConfig.graphMeEndpoint, options)\n    .then((response) => response.json())\n    .catch((error) => {\n      console.log(error);\n      throw error;\n    });\n}\n\nexport { msalInstance };\n\nexport { msalPlugin };\n", "import { PublicClientApplication } from '@azure/msal-browser';\nimport type { Configuration } from '@azure/msal-browser';\n\n/**\n * Creates and returns a new PublicClientApplication instance with the provided configuration.\n *\n * @param msalConfig - The configuration for the MSAL PublicClientApplication.\n * @returns A new PublicClientApplication instance.\n */\nexport const msalInstance = (msalConfig: Configuration) => {\n  try {\n    return new PublicClientApplication(msalConfig);\n  } catch (error) {\n    console.error('Failed to create PublicClientApplication:', error);\n    throw error;\n  }\n};\n", "import { reactive } from 'vue';\nimport type { App } from 'vue';\nimport { EventMessageUtils, EventType, InteractionStatus, PublicClientApplication } from '@azure/msal-browser';\nimport type { EventMessage } from '@azure/msal-browser';\n\nimport type { State } from './types.ts';\nimport { accountArraysAreEqual } from './helpers.ts';\n\nexport const msalPlugin = {\n  install: (app: App, msalInstance: PublicClientApplication) => {\n    // Initializing the interaction status and accounts\n    const inProgress: InteractionStatus = InteractionStatus.Startup;\n    const accounts = msalInstance.getAllAccounts();\n\n    // Creating a reactive state\n    const state = reactive<State>({\n      instance: msalInstance,\n      inProgress: inProgress,\n      accounts: accounts,\n    });\n\n    // Adding the state to the global properties of the Vue app\n    app.config.globalProperties.$msal = state;\n\n    // Adding an event callback to the MSAL instance\n    msalInstance.addEventCallback((message: EventMessage) => {\n      switch (message.eventType) {\n        case EventType.ACCOUNT_ADDED:\n        case EventType.ACCOUNT_REMOVED:\n        case EventType.LOGIN_SUCCESS:\n        case EventType.SSO_SILENT_SUCCESS:\n        case EventType.HANDLE_REDIRECT_END:\n        case EventType.LOGIN_FAILURE:\n        case EventType.SSO_SILENT_FAILURE:\n        case EventType.LOGOUT_END:\n        case EventType.ACQUIRE_TOKEN_SUCCESS:\n        case EventType.ACQUIRE_TOKEN_FAILURE: {\n          // Updating the accounts in the state when an account-related event occurs\n          const currentAccounts = msalInstance.getAllAccounts();\n          if (!accountArraysAreEqual(currentAccounts, state.accounts)) {\n            state.accounts = currentAccounts;\n          }\n          break;\n        }\n      }\n      // Updating the interaction status in the state when an interaction-related event occurs\n      const status = EventMessageUtils.getInteractionStatusFromEvent(message, state.inProgress);\n      if (status !== null) {\n        state.inProgress = status;\n      }\n    });\n  },\n};\n", "import type { AccountIdentifiers } from './types.ts';\n\n/**\n * Helper function to determine whether 2 arrays are equal\n * Used to avoid unnecessary state updates\n * @param arrayA\n * @param arrayB\n */\nexport function accountArraysAreEqual(arrayA: Array<AccountIdentifiers>, arrayB: Array<AccountIdentifiers>): boolean {\n  if (arrayA.length !== arrayB.length) {\n    return false;\n  }\n\n  const comparisonArray = [...arrayB];\n\n  return arrayA.every((elementA) => {\n    const elementB = comparisonArray.shift();\n    if (!elementA || !elementB) {\n      return false;\n    }\n\n    return (\n      elementA.homeAccountId === elementB.homeAccountId &&\n      elementA.localAccountId === elementB.localAccountId &&\n      elementA.username === elementB.username\n    );\n  });\n}\n"],
  "mappings": "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",
  "names": ["InteractionStatus", "InteractionType", "getCurrentInstance", "toRefs", "watch", "ref", "PublicClientApplication", "msalInstance", "msalConfig", "error", "reactive", "EventMessageUtils", "EventType", "InteractionStatus", "accountArraysAreEqual", "arrayA", "arrayB", "comparisonArray", "elementA", "elementB", "msalPlugin", "app", "msalInstance", "inProgress", "InteractionStatus", "accounts", "state", "reactive", "message", "EventType", "currentAccounts", "accountArraysAreEqual", "status", "EventMessageUtils", "loginRequest", "useMsal", "internalInstance", "getCurrentInstance", "instance", "accounts", "inProgress", "toRefs", "InteractionStatus", "error", "callMsGraph", "useIsAuthenticated", "isAuthenticated", "ref", "watch", "useMsalAuthentication", "interactionType", "request", "localInProgress", "result", "acquireToken", "requestOverride", "tokenRequest", "response", "e", "InteractionType", "stopWatcher", "graphConfig", "accessToken", "headers", "bearer", "options"]
}
